-- CONNECTION: name=postgres
--username = postgres
--password = ipad

--This is the first step to the SQL design of our project. 
--create tables and its primary keys and foreign keys references...

--Created by Deep, Neil, and Saurabh

--make table for User------------------------------------------------------------------------------------------------------------------
create table users (

	name_of_person varchar(40),
	

primary key(name_of_person),

foreign key(name_of_person) 

	references (membership_id, 
				name_id),
			
)

--make table for Membership-------------------------------------------------------------------------------------------------------------- 

create table membership (

	membership_id 	 char(10), 
	reservation_id 	 char(10),
	is_member		 varchar(5),  
	assigned_spot    varchar(4),
	make_guest_spot  varchar(4), 
	Credit_Card_info char(16),
	Money_mem 		 char(3),
	

primary key(membership_id),

--foreign keys--
foreign key(make_guest_spot) 

	references (
			have_a_guest, 
			reserved_lots
			   ),
	
foreign key(membership_id)

	references (have_a_guest),
	
foreign key(is_member),

	references (non_membership),
	
foreign key(reservation_id)

	references (
		check_in_time, 
		check_out_time, 
		spot_time_sync
			   ),

foreign key(membership) 

	references(update_membership),
	
foreign key(membership) 

	references(is_member = true)--fix this boolean call

	);


--make table for Parking Lots--------------------------------------------------------------------------------------------------------------

create table parking_lots (

	has_spot_open 	varchar(5),
	number_of_spots varchar(3), 
	parking_space 	varchar(5), 
	other_lots 		varchar(4),
	reserved_lots 	varchar(4), 
	
--primary keys--
primary key (
		parking_space, 
		other_lots
		    ),

--foreign keys--
foreign key(reserved_lots)

	references(user_login),

foreign key(reserved_lots)

	references(make_guest_spot),

foreign key(reserved_lots)

	references(spot_time_sync),
	
foreign key(parking_space)

	references (
		car,
		car_id,
		reservation_id, 
		reservation_id, 
		is_member = true
			  )--fix this boolean call above this line
	
	);


--make table for Reservation--------------------------------------------------------------------------------------------------------------

create table reservation (

	online_reservation_id 		char(10), 
	drive_in_reservation_id 	char(10), 
	member_reservation_id 		char(10),

--primary keys--
primary key  (
		drive_in_reservation_id, 
		member_reservation_id, 
		online_reservation_id
			 ),

--foreign keys--
foreign key (
		drive_in_reservation_id,
		member_reservation_id,
		online_reservation_id
	        )
	references(staff),
	
foreign key (
		drive_in_reservation_id,
		member_reservation_id,
		online_reservation_id
			)
			
	references(staff.have_reservation_access),

foreign key (
		drive_in_reservation_id,
		member_reservation_id,
		online_reservation_id
		    )
	references(staff)
	
	);


--make table for Staff--------------------------------------------------------------------------------------------------------------

create table staff (

	name_id 					varchar(40),
	have_reservation_access 	char(5), 

--primary keys--
primary key(name_id), 

--foreign keys--
foreign key (
	 have_reservation_access, 
	 name_id
			) 
	references(reservation)

	);


---make table for Customers--------------------------------------------------------------------------------------------------------------

create table customers (

	name_id 						varchar(40), 
	is_member 						varchar(5), 
	have_a_guest 					varchar(5), 
	online_reservation_id 			char(10), 
	drive_in_reservation_id 		char(10), 
	car_id 							char(6), 
	Credit_Card_info 				char(16), 
	
--primary keys--	
primary key (name_id),

--foreign keys--
foreign key(have_a_guest) 

	references(make_guest_spot),

foreign key(car_id) 

	references (
		car, 
		reservation_id, 
		reservation_id, 
		parking_space
			   ),

foreign key(drive_in_reservation_id) 

	references(drive_in_reservation_id),
	
foreign key(online_reservation_id) 

	references(online_reservation_id)

	);


--make table for Car--------------------------------------------------------------------------------------------------------------

create table car (

	car_plate 		char(6), 
	guest_plate 	char(6), 

--primary keys--
primary key (car_plate),

foreign key(car_plate) 

	references (
		non_membership,
		membership
		staff
			   )

	);


--make table for Time Slots--------------------------------------------------------------------------------------------------------------

create table time_slot (

	days_removed_guest		 	varchar(2), 
	check_in_time 				varchar(5),
	check_out_time 				varchar(5),
	spot_time_sync 				varchar(5), 

--primary keys--
primary key(spot_time_sync), 

--foreign keys--
foreign key (
	check_in_time, 
	check_out_time
			) 
		references (
		parking_admin,
		non_membership,
		membership
			),
	
foreign key (spot_time_sync)
	references (has_spot_open)

	);


--make table for Parking Admin--------------------------------------------------------------------------------------------------------------

create table parking_admin (

	update_membership 		varchar(5), 
	name_id 				varchar(40),
	membership_id 			char(10), 
	spots_available 		varchar(4), 
	monthly_revenue 		varchar(9), 
	parking_usage 			varchar(4), 
	Credit_Card_Mem			char(16),
	Credit_Card_NonMem		char(16),
	

--primary keys--
primary key (
		membership_id,
		name_id), 

--foreign keys--
foreign key(update_membership) 
	references(membership),
	
foreign key(monthly_revenue) 
	references (membership_fee_access),
	
foreign key (

	update_membership, 
	name_id,
	membership_id, 
	spots_available, 
	monthly_revenue, 
	parking_usage
	
			)

		references(reservation.drive_in_reservation_id),
		
foreign key (

	update_membership, 
	name_id,
	membership_id, 
	spots_available, 
	monthly_revenue, 
	parking_usage
	
			)
			
			references (
				 check_in_time,
				 check_out_time,
				 spot_time_sync,
				 reservation_id,
				 reservation_id
				       ),

foreign key ( monthly_revenue)

	references ( membership_fee_access),
	
foreign key (parking_usage)

	references (parking_lots),

foreign key (parking_usage)
	references (parking_lots)
	
foreign key (Credit_Card_Mem)
	references (Credit_Card_Info)
	
foreign key (Credit_Card_NonMem)
	references (Credit_Card_info)
	
foreign key (monthly_revenue)
	references (Money_mem)
	
foreign key (monthly_revenue)
	references (Money_nonmem)
	
	
	
	);


--make table for Non Members--------------------------------------------------------------------------------------------------------------

create table non_membership (

	name_id				varchar(40), 
	assigned_spot 		varchar(4), 
	reservation_id 		varchar(10), 
	Credit_Card_info    char(16),
	Money_nonmem 		char(3),
	
--primary keys--	
primary key (
		 reservation_id, 
		 name_iD
			),

--foreign keys--
foreign key(assigned_spot) 

	references(assigned_spot),

foreign key(name_id) 

	references(is_member = false), --fix this boolean call
	
foreign key(name_id) 

	references(other_lots),
	
foreign key(reservation_id) 

	references (
			check_in_time, 
			check_out_time, 
			spot_time_sync, 
			parking_admin, 
			reservation_id, 
			reservation_id
			  ),

foreign key(assigned_spot)

	references(parking_lots)
	
	
	); 


--make table for the Application Manager---------------------------------------------------------------------------------------------------

create table application_manager (
	membership_fee_access 		char(10),
	membership_id 				char(10), 
	track_member_spots 			varchar(4), 
	user_login 					varchar(40),
	guest_login					varchar(40), 
	time_stamp_login 		    varchar(5), 
	
--primary keys--
primary key (
	membership_id,
	user_login
			), 

--foreign keys--
foreign key(user_login)

	references(reserved_lots),
	
foreign key(user_login)

	references(name_id),
	
foreign key(membership_fee_access) 

	references(is_member),

foreign key(guest_login)

	references (
		reservation_id, 
		drive_in_reservation_id
				),
	
foreign key(time_stamp_login)

	references (
		have_a_guest,
		membership_id
				),
	
foreign key(user_login)

	references(reserved_lots),

foreign key(track_member_spots)

	references(parking_lots),
	
foreign key(membership_fee_access)

	references(is_member = true), --fix boolean call
	
foreign key(track_member_spots)

	references(parking_lots),

foreign key (
	membership_fee_access,
	membership_id,
	track_member_spots,
	user_login,
	guest_login,
	time_stamp_login 	
			)
	references (parking_admin)
	
	);
-----------------------------------------------------------------------------------------------------------------------------------------------------
